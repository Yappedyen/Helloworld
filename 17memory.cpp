#include<iostream>

using namespace std;

//面向对象编程
//1.内存分区模型
//*代码区：存放函数体的二进制代码，由操作系统进行管理
//*全局区：存放全局变量和静态变量以及常量
//*栈区：由编译器自动分配释放，存放函数的参数值，局部变量等
//*堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收
//内存四区意义：
//不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程

//1.1程序运行前
//编译后生成exe可执行程序
//代码区：
//存放CPU执行的机器指令
//代码区共享的，共享的目的是对于频繁被执行的程序，只需要内存中有一份代码即可
//代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令
//全局区：
//全局变量和静态变量存放在此
//全局区还包含了常量区，字符串常量和其他常量也存放在此
//该区域的数据在程序结束后由操作系统释放

//1.2程序运行后
//栈区：
//由编译器自动分配释放，存放函数的参数值，局部变量等
//注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放

//堆区：
//由程序员分配释放，若程序员不释放，程序结束时由操作系统回收
//在C++中主要利用new在堆区中开辟内存

//全局变量
int a_global = 10;
//全局常量
const int c_a_global = 50;

int* func(int b)//形参数据也会放在栈区
{
	b = 100;
	int a = 10;//局部变量  存放在栈区，栈区的数据在函数执行完后自动释放
	return &a;//返回局部变量的地址
}

int* function()
{
	//利用new关键字 可以将数据开辟到堆区
	//指针 本质上也是局部变量，放在栈上，指针保存的数据是放在堆区
	//new 返回的是该数据类型的指针
	int *p = new int(10);
	return p;
}
//2.在堆区利用new开辟数组
void test2()
{
	//创建10整型的数组，在堆区
	int * arr = new int[10]; //10代表数组有10个元素

	for (int i = 0;i < 10;i++)
	{
		arr[i] = i + 100;
	}
	for (int i = 0;i < 10;i++)
	{
		cout << arr[i] << endl;
	}
	//释放堆区数组
	//释放数组时，要加[]才可以
	//delete[] arr;
}


//new操作符在堆区开辟数据空间
//释放利用delete
//语法  new 数据类型
//利用new创建的数据，会返回该数据对应的类型的指针

int main17()
{
	//全局区
	//全局变量、静态变量(static)、常量（字符串常量、const修饰的全局常量）

	//创建普通局部变量
	int a = 20;

	//静态变量
	static int s_a = 30;

	//常量
	//字符串常量
	

	//const 修饰的变量
	//const修饰的全局变量，const修饰的局部变量
	const int c_l_a = 60;
	
	cout << "全局变量地址：" << &a_global << endl;
	cout << "静态变量地址：" << &s_a << endl;
	cout << "字符串常量地址：" << &"hello" << endl;
	cout << "全局常量地址：" << &c_a_global << endl;

	cout << "局部常量地址：" << &c_l_a << endl;
	cout << "局部变量a地址：" << &a << endl;

	//接收func函数的返回值
	//int* p = func(a);
	
	//cout << *p << endl;//第一次可以打印正确的数字，是因为编译器做了保留
	//cout << *p << endl;//第二次这个数据就不在保留

	//在堆区开辟数据
	int* p = function();

	cout << *p << endl;
	cout << *p << endl;
	cout << *p << endl;

	//堆区的数据 由程序员开辟和释放
	//如果想释放堆区数据，利用关键字delete
	delete p;
	//cout << *p << endl; //内存已经释放，再次访问就是非法操作，会报错
	test2();
	system("pause");
	return 0;
}